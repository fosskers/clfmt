#+title: clfmt

=clfmt= is a tool that lightly refactors your Common Lisp code.

It mainly aims to reduce extraneous whitespace and newlines, and avoids "being a
hero", leaving parenthesis management and sexp alignment to the editor.
Staying simple keeps =clfmt= performant and nimble, compiling to a small executable.

* Table of Contents :TOC_5_gh:noexport:
- [[#installation][Installation]]
  - [[#from-source][From Source]]
  - [[#linux][Linux]]
    - [[#arch][Arch]]
- [[#editor-integration][Editor Integration]]
  - [[#emacs-apheleia][Emacs (Apheleia)]]
    - [[#doom-emacs][Doom Emacs]]
- [[#usage][Usage]]
  - [[#format-a-file][Format a File]]
  - [[#format-from-stdin][Format from STDIN]]
  - [[#format-files-in-place][Format Files in-place]]

* Installation

** From Source

=clfmt= requires ECL to build.

#+begin_example
ecl --load build.lisp
#+end_example

** Linux

*** Arch

=clfmt= is [[https://aur.archlinux.org/packages/clfmt][available on the AUR]] and can be installed with tools like [[https://github.com/fosskers/aura][Aura]]:

#+begin_example
aura -A clfmt
#+end_example

* Editor Integration

** Emacs (Apheleia)

In general, it should be enough to add:

#+begin_src emacs-lisp
(add-to-list 'apheleia-formatters '(clfmt . ("clfmt")))
(add-to-list 'apheleia-mode-alist '(lisp-mode . (lisp-indent clfmt)))
#+end_src

Provided that =apheleia= has already been loaded and those lists exist.

*** Doom Emacs

Due to how =set-formatter!= is used by Doom internally, we must:

#+begin_src emacs-lisp
(after! sly
  (after! apheleia
    (assq-delete-all 'lisp-mode apheleia-mode-alist)
    (add-to-list 'apheleia-mode-alist '(lisp-mode . (lisp-indent clfmt)))))

(after! apheleia-formatters
  (add-to-list 'apheleia-formatters '(clfmt . ("clfmt"))))
#+end_src

Then, upon saving a Common Lisp buffer, you will get both automatic alignment
and whitespace clearing.

* Usage
** Format a File

Just pass =clfmt= a file:

#+begin_example
clfmt foo.lisp
#+end_example

And its reformatted form will print to STDOUT.

** Format from STDIN

Some editor integrations want to feed input via STDIN. That's equivalent to:

#+begin_example
cat foo.lisp | clfmt
#+end_example

** Format Files in-place

The =-i= flag will directly overwrite a given file:

#+begin_example
clfmt -i foo.lisp
#+end_example

You can reformat all files in a directory too:

#+begin_example
clfmt -i src/
#+end_example
